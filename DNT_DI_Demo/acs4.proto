syntax = "proto3";

package acs4;

import "aelf/options.proto";
import "aelf/core.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

option (aelf.identity) = "acs4";

// 一系列标准的共识接口，包括触发共识的逻辑、生成区块头共识扩展数据的逻辑、生成共识系统交易的逻辑、验证区块的逻辑。
service ConsensusContract {
    rpc GetConsensusCommand (google.protobuf.BytesValue) returns (ConsensusCommand) {
        option (aelf.is_view) = true;
    }
    rpc GetInformationToUpdateConsensus (google.protobuf.BytesValue) returns (google.protobuf.BytesValue) {
        option (aelf.is_view) = true;
    }
    rpc GenerateConsensusTransactions (google.protobuf.BytesValue) returns (TransactionList) {
        option (aelf.is_view) = true;
    }
    rpc ValidateConsensusBeforeExecution (google.protobuf.BytesValue) returns (ValidationResult) {
        option (aelf.is_view) = true;
    }
    rpc ValidateConsensusAfterExecution (google.protobuf.BytesValue) returns (ValidationResult) {
        option (aelf.is_view) = true;
    }
}

message ConsensusCommand {
    int32 next_block_mining_left_milliseconds = 1;// How many milliseconds left to trigger the mining of next block.
    int32 limit_milliseconds_of_mining_block = 2;// Time limit of mining next block.
    // 使用bytes就是为了保证该数据在不同共识的通用性，不同共识使用不同的反序列化方式即可
    bytes hint = 3;// Context of Hint is diverse according to the consensus protocol we choose, so we use bytes.
    google.protobuf.Timestamp expected_mining_time = 4;
    google.protobuf.Timestamp mining_due_time = 5;
}

message ValidationResult {
    bool success = 1;
    string message = 2;
}

message TransactionList {
    repeated aelf.Transaction transactions = 1;
}